######## 
# This script run FDTD at different background index and export field distribution data

# When plane wave pass through few particles scatters, wavefront distort
# As we sweep refractive index of the background, wavefront become plane wave when index match
# Export field distribution at 600, 640, 680nm to .mat

# Author: Yi-Shiou Duh (allenduh@stanford.edu)
# 3/21/2024
########

for (idxDye = 1 : numOfBackgroundIndex) {

    switchtolayout;
    deleteall;
    RI_dye = background_index(idxDye);
    ?RI_dye;
    filename = filename_base + num2str(idxDye);

    ############################
    ###### Add FDTD 
    ############################
    
    addfdtd;
    set("dimension", 1);	    #  1 = 2D, 2 = 3D
    set("simulation time", simulationTime);
    set("simulation temperature", 300);
    set("x", 0);
    set("x span", Xspan);
    set("y", Yspan / 2);
    set("y span", Yspan);
    set("mesh accuracy", meshacc);
    set("x min bc", "periodic");  # Simple BC for plane wave illumination, X Span 30um >> wavelength 
    set("x max bc", "periodic");   
    set("y min bc", "PML");
    set("y max bc", "PML");
    set("mesh refinement", mesh);
    set("index", RI_dye);      
    set("pml layers", pmlLayers);  
    set("dt stability factor", dt);
    set("auto shutoff min", autoShut);
            
            
    ############################        
    ###### Add Background dye
    ############################
    
    addrect;
    set("name", "Liquid");            
    set("x", 0);
    set("x span", Xspan + umUnit); # Liquid rectangle surpass boundary to avoid error
    set("y", Yspan / 2);
    set("y span", Yspan + umUnit);
    
    # Set Dye refractive index 
    setmaterial("Dye_index_vary", {"Refractive Index": RI_dye, "Imaginary Refractive Index": 0});
    set("material", "Dye_index_vary");


    ############################
    ###### Add scatter
    ############################
    
    for(k = 1 : numOfParticles) {
        addcircle;
        set("name","SiO2");
        set("x", xLocList(k));
        set("y", yLocList(k));
        set("radius", scatter_radius);
        #set("material","SiO2 - Quartz");
        #set("material","SiO2 (Glass) - Palik");
        set("material","Silica_1.43");
    }



    ############################
    ##### Add Plane wave
    ############################
    
    addplane;
    set("name", "Plane wave");
    set("injection axis", "y");
    set("direction", "forward");
    set("x", 0);
    set("x span",  Xspan);
    set("y", sourceY);        
    set("wavelength start", lambdaStart);
    set("wavelength stop", lambdaEnd);



    ############################
    ##### Add field distribution monitor
    ############################
    setglobalmonitor("frequency points", (lambdaEnd - lambdaStart) / lambdaStep + 1);
    setglobalmonitor("use wavelength spacing", 1);
    
    addpower;
    set("name","FieldDistribution");
    set("monitor type", 7);  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
    set("x", 0);
    set("x span",  Xspan);
    set("y min", sourceY);           
    set("y max", Yspan);
    set("down sample X", downSample);
    set("down sample Y", downSample);




    ############################
    ## Run simulation and file save
    ############################      
       
    run;

    # Extract values to save
    fullField = getresult("FieldDistribution","E");
    fullField_Ex = fullField.Ex;
    fullField_Ey = fullField.Ey;
    fullField_lambda = fullField.lambda;
    fullField_xCoordinate = fullField.x;
    fullField_yCoordinate = fullField.y;

    matlabsave(filename, fullField, fullField_Ex, fullField_Ey, fullField_lambda, xLocList, yLocList, fullField_xCoordinate, fullField_yCoordinate);
    print(filename);

}