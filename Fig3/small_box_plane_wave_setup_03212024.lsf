#### 
# This script setup FDTD environment
# i.e. Geometry of scatters, plane wave illumination, boundary condition, field distribution monitor

# Author: Yi-Shiou Duh (allenduh@stanford.edu)
# 3/21/2024


##############################################
## FDTD Set up 
##############################################

### Initialization
switchtolayout;
selectall;
clear;  # script workspace
deleteall;

### File export
filename_base = "C:\Users\allen\Desktop\plane_wave_smallbox_03212024_index_";

### Const
nmUnit = 1e-9;
umUnit = 1e-6;
c0 = 3e8;

# Mesh setting
mesh = "conformal variant 0"; # How to choose see https://support.lumerical.com/hc/en-us/articles/360034382614
meshacc = 4;        # mesh accuracy  = 4
meshOverRidenm = 10;  

### FDTD Domain size
Xspan = 10 * umUnit; 
Yspan = 12 * umUnit; 

# FDTD time
simulationTime = 3 * Yspan / c0; 
pmlLayers = 5;  
dt = 0.99;  # DT STABILITY FACTOR. Larger: faster simulation time. For long propergation set to 0.9
autoShut = 1e-08;

# Monitor setup
downSample = 1;  # or 3 (course)

# Plane wave source location
sourceY = 0.1 * umUnit;  

# Define wavelength
lambdaStart = 600 * nmUnit;	  # Initial wavelength
lambdaEnd = 680 * nmUnit;     # Final wavelengt
lambdaStep = 40 * nmUnit;      # Wavelength step

##############################################
## Scatter
#      Radius -- 0.5 micron
#      SiO2 (1.43) on water (1.33, 1.37, 1.41, 1.45, 1.49)
#      Density 0.3 particles / um^2
#      We made these scattering phantoms by uniformly mixing silica nanospheres with an n' of 1.43 (close to that of lipids and collagen) 
#      in an optically transparent hydrogel with a background n' of 1.33 (the same as water)
##############################################
scatter_radius = 500 * nmUnit;

particleDensity = 0.3;
blurry_top_Y = 11 * umUnit;
blurry_down_Y = 1 * umUnit;
numOfParticles = round((blurry_top_Y - blurry_down_Y) * Xspan / umUnit ^ 2 * particleDensity);


# Background index list
background_index = [1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39, 1.4, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49, 1.5];
numOfBackgroundIndex = length(background_index);

# Add material
if (materialexists("Dye_index_vary") != 1) { 
        setmaterial(addmaterial("(n,k) Material"), "name", "Dye_index_vary");  
    }
    
if (materialexists("Hydrogel_1.33") != 1) { 
        setmaterial(addmaterial("(n,k) Material"), "name", "Hydrogel_1.33");  
        setmaterial("Hydrogel_1.33", {"Refractive Index": 1.33, "Imaginary Refractive Index": 0});
    }

if (materialexists("Silica_1.43") != 1) { 
        setmaterial(addmaterial("(n,k) Material"), "name", "Silica_1.43");  
        setmaterial("Silica_1.43", {"Refractive Index": 1.43, "Imaginary Refractive Index": 0});
    }    
    

loaddata("small_box_scatters_location");
##############################################
## If scatter's location (xLocList, yLocList) not determined
##############################################
#xLocList = matrix(numOfParticles, 1);
#yLocList = matrix(numOfParticles, 1);
#particleIndex = 0;

#for (i = 1 : numOfParticles + 100) {
    #if (particleIndex < numOfParticles) {
        #xLoc = rand(-Xspan/2 + scatter_radius, Xspan/2 - scatter_radius);
        #yLoc = rand(blurry_down_Y + scatter_radius, blurry_top_Y -  scatter_radius);
    
        ### Check new added particle not touch previous generate   
        #touch = false;
        #for (j = 1 : particleIndex) {
            #xOtherParticle = xLocList(j, 1);
            #yOtherParticle = yLocList(j, 1);
            #interDist = sqrt((xOtherParticle - xLoc)^2 + (yOtherParticle - yLoc)^2);	
            #if (interDist < 2 * scatter_radius) { ## Touch
                #touch = true;
            #}
         #}
         
        ### If new particle not touch previous generated, add into (xLocList, yLocList)
        #if (touch == false) {  
            #xLocList(particleIndex + 1) = xLoc;        
            #yLocList(particleIndex + 1) = yLoc; 
            #particleIndex = particleIndex + 1;
         #}
    #}
#}        

#savedata("small_box_scatters_location", xLocList, yLocList); 

# In the front
#xLocList = matrix(numOfParticles, 1);
#yLocList = matrix(numOfParticles, 1);
#select("SiO2");
#for (i=1:getnumber) {
 #xLoc=get("x",i);
 #yLoc=get("y",i);
 #xLocList(i) = xLoc ;        
 #yLocList(i) = yLoc ; 
#}
#savedata("small_box_scatters_location", xLocList, yLocList); 

